/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type GoalParamsStruct = {
  durationDaysCount: PromiseOrValue<BigNumberish>;
  maxFailDaysCount: PromiseOrValue<BigNumberish>;
  dailyStepsCount: PromiseOrValue<BigNumberish>;
  betAmount: PromiseOrValue<BigNumberish>;
};

export type GoalParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  durationDaysCount: BigNumber;
  maxFailDaysCount: BigNumber;
  dailyStepsCount: BigNumber;
  betAmount: BigNumber;
};

export interface StepsHunterInterface extends utils.Interface {
  functions: {
    "_createRequest(uint256,bytes32)": FunctionFragment;
    "_fulfill(bytes32,uint256)": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "checkUpkeep(bytes)": FunctionFragment;
    "createGoal((uint256,uint256,uint256,uint256))": FunctionFragment;
    "env()": FunctionFragment;
    "fulfill(bytes32,uint256)": FunctionFragment;
    "goalCheckInterval()": FunctionFragment;
    "goalsDayRecordsMap(uint256,uint256)": FunctionFragment;
    "goalsDaysRecordsReqsMap(bytes32)": FunctionFragment;
    "goalsMap(uint256)": FunctionFragment;
    "i_link()": FunctionFragment;
    "i_registry()": FunctionFragment;
    "lastTimeStamp()": FunctionFragment;
    "owner()": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "processGoalDayRecord(uint256,bytes32,uint256)": FunctionFragment;
    "registrar()": FunctionFragment;
    "requestGoalDayRecord(uint256)": FunctionFragment;
    "stepsHunterNft()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawLink()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_createRequest"
      | "_fulfill"
      | "acceptOwnership"
      | "checkUpkeep"
      | "createGoal"
      | "env"
      | "fulfill"
      | "goalCheckInterval"
      | "goalsDayRecordsMap"
      | "goalsDaysRecordsReqsMap"
      | "goalsMap"
      | "i_link"
      | "i_registry"
      | "lastTimeStamp"
      | "owner"
      | "performUpkeep"
      | "processGoalDayRecord"
      | "registrar"
      | "requestGoalDayRecord"
      | "stepsHunterNft"
      | "transferOwnership"
      | "withdrawLink"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_createRequest",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "_fulfill",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGoal",
    values: [GoalParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "env", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "goalCheckInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "goalsDayRecordsMap",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "goalsDaysRecordsReqsMap",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "goalsMap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "i_link", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "i_registry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processGoalDayRecord",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "registrar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestGoalDayRecord",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stepsHunterNft",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLink",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_createRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_fulfill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGoal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "env", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "goalCheckInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "goalsDayRecordsMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "goalsDaysRecordsReqsMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goalsMap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "i_link", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "i_registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processGoalDayRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registrar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestGoalDayRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stepsHunterNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLink",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "CreateReq(bytes32)": EventFragment;
    "FulfillRes(bytes32,uint256)": EventFragment;
    "GoalCreated(uint256,uint256)": EventFragment;
    "GoalDayRecordAdded(uint256,uint256,uint256)": EventFragment;
    "GoalFinished(uint256,uint8)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateReq"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FulfillRes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GoalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GoalDayRecordAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GoalFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ChainlinkCancelledEventObject {
  id: string;
}
export type ChainlinkCancelledEvent = TypedEvent<
  [string],
  ChainlinkCancelledEventObject
>;

export type ChainlinkCancelledEventFilter =
  TypedEventFilter<ChainlinkCancelledEvent>;

export interface ChainlinkFulfilledEventObject {
  id: string;
}
export type ChainlinkFulfilledEvent = TypedEvent<
  [string],
  ChainlinkFulfilledEventObject
>;

export type ChainlinkFulfilledEventFilter =
  TypedEventFilter<ChainlinkFulfilledEvent>;

export interface ChainlinkRequestedEventObject {
  id: string;
}
export type ChainlinkRequestedEvent = TypedEvent<
  [string],
  ChainlinkRequestedEventObject
>;

export type ChainlinkRequestedEventFilter =
  TypedEventFilter<ChainlinkRequestedEvent>;

export interface CreateReqEventObject {
  _requestId: string;
}
export type CreateReqEvent = TypedEvent<[string], CreateReqEventObject>;

export type CreateReqEventFilter = TypedEventFilter<CreateReqEvent>;

export interface FulfillResEventObject {
  _requestId: string;
  _stepsCount: BigNumber;
}
export type FulfillResEvent = TypedEvent<
  [string, BigNumber],
  FulfillResEventObject
>;

export type FulfillResEventFilter = TypedEventFilter<FulfillResEvent>;

export interface GoalCreatedEventObject {
  goalId: BigNumber;
  goalUpkeepID: BigNumber;
}
export type GoalCreatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  GoalCreatedEventObject
>;

export type GoalCreatedEventFilter = TypedEventFilter<GoalCreatedEvent>;

export interface GoalDayRecordAddedEventObject {
  goalId: BigNumber;
  goalDayRecordId: BigNumber;
  stepsCount: BigNumber;
}
export type GoalDayRecordAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  GoalDayRecordAddedEventObject
>;

export type GoalDayRecordAddedEventFilter =
  TypedEventFilter<GoalDayRecordAddedEvent>;

export interface GoalFinishedEventObject {
  goalId: BigNumber;
  status: number;
}
export type GoalFinishedEvent = TypedEvent<
  [BigNumber, number],
  GoalFinishedEventObject
>;

export type GoalFinishedEventFilter = TypedEventFilter<GoalFinishedEvent>;

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StepsHunter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StepsHunterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _createRequest(
      goalId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _fulfill(
      _requestId: PromiseOrValue<BytesLike>,
      _stepsCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkUpkeep(
      checkData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    createGoal(
      goalParams: GoalParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    env(overrides?: CallOverrides): Promise<[number]>;

    fulfill(
      _requestId: PromiseOrValue<BytesLike>,
      _stepsCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    goalCheckInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    goalsDayRecordsMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, number] & {
        id: BigNumber;
        requestId: string;
        dateTimestamp: BigNumber;
        goalId: BigNumber;
        stepsCount: BigNumber;
        status: number;
      }
    >;

    goalsDaysRecordsReqsMap(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number] & {
        requestId: string;
        goalId: BigNumber;
        dateTimestamp: BigNumber;
        stepsCount: BigNumber;
        requestStatus: number;
      }
    >;

    goalsMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        id: BigNumber;
        status: number;
        durationDaysCount: BigNumber;
        dayRecordsCount: BigNumber;
        currentDayRecordRequestId: string;
        lastDayRecordTimestamp: BigNumber;
        maxFailDaysCount: BigNumber;
        failDaysCount: BigNumber;
        dailyStepsCount: BigNumber;
        betAmount: BigNumber;
        userAddr: string;
        upkeepID: BigNumber;
      }
    >;

    i_link(overrides?: CallOverrides): Promise<[string]>;

    i_registry(overrides?: CallOverrides): Promise<[string]>;

    lastTimeStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processGoalDayRecord(
      goalId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      stepsCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registrar(overrides?: CallOverrides): Promise<[string]>;

    requestGoalDayRecord(
      goalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stepsHunterNft(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawLink(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _createRequest(
    goalId: PromiseOrValue<BigNumberish>,
    requestId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _fulfill(
    _requestId: PromiseOrValue<BytesLike>,
    _stepsCount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkUpkeep(
    checkData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string] & { upkeepNeeded: boolean; performData: string }
  >;

  createGoal(
    goalParams: GoalParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  env(overrides?: CallOverrides): Promise<number>;

  fulfill(
    _requestId: PromiseOrValue<BytesLike>,
    _stepsCount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  goalCheckInterval(overrides?: CallOverrides): Promise<BigNumber>;

  goalsDayRecordsMap(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, BigNumber, number] & {
      id: BigNumber;
      requestId: string;
      dateTimestamp: BigNumber;
      goalId: BigNumber;
      stepsCount: BigNumber;
      status: number;
    }
  >;

  goalsDaysRecordsReqsMap(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, number] & {
      requestId: string;
      goalId: BigNumber;
      dateTimestamp: BigNumber;
      stepsCount: BigNumber;
      requestStatus: number;
    }
  >;

  goalsMap(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber
    ] & {
      id: BigNumber;
      status: number;
      durationDaysCount: BigNumber;
      dayRecordsCount: BigNumber;
      currentDayRecordRequestId: string;
      lastDayRecordTimestamp: BigNumber;
      maxFailDaysCount: BigNumber;
      failDaysCount: BigNumber;
      dailyStepsCount: BigNumber;
      betAmount: BigNumber;
      userAddr: string;
      upkeepID: BigNumber;
    }
  >;

  i_link(overrides?: CallOverrides): Promise<string>;

  i_registry(overrides?: CallOverrides): Promise<string>;

  lastTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  performUpkeep(
    performData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processGoalDayRecord(
    goalId: PromiseOrValue<BigNumberish>,
    requestId: PromiseOrValue<BytesLike>,
    stepsCount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registrar(overrides?: CallOverrides): Promise<string>;

  requestGoalDayRecord(
    goalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stepsHunterNft(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawLink(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _createRequest(
      goalId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    _fulfill(
      _requestId: PromiseOrValue<BytesLike>,
      _stepsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    checkUpkeep(
      checkData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { upkeepNeeded: boolean; performData: string }
    >;

    createGoal(
      goalParams: GoalParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    env(overrides?: CallOverrides): Promise<number>;

    fulfill(
      _requestId: PromiseOrValue<BytesLike>,
      _stepsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    goalCheckInterval(overrides?: CallOverrides): Promise<BigNumber>;

    goalsDayRecordsMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, number] & {
        id: BigNumber;
        requestId: string;
        dateTimestamp: BigNumber;
        goalId: BigNumber;
        stepsCount: BigNumber;
        status: number;
      }
    >;

    goalsDaysRecordsReqsMap(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number] & {
        requestId: string;
        goalId: BigNumber;
        dateTimestamp: BigNumber;
        stepsCount: BigNumber;
        requestStatus: number;
      }
    >;

    goalsMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        id: BigNumber;
        status: number;
        durationDaysCount: BigNumber;
        dayRecordsCount: BigNumber;
        currentDayRecordRequestId: string;
        lastDayRecordTimestamp: BigNumber;
        maxFailDaysCount: BigNumber;
        failDaysCount: BigNumber;
        dailyStepsCount: BigNumber;
        betAmount: BigNumber;
        userAddr: string;
        upkeepID: BigNumber;
      }
    >;

    i_link(overrides?: CallOverrides): Promise<string>;

    i_registry(overrides?: CallOverrides): Promise<string>;

    lastTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processGoalDayRecord(
      goalId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      stepsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registrar(overrides?: CallOverrides): Promise<string>;

    requestGoalDayRecord(
      goalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    stepsHunterNft(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLink(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ChainlinkCancelled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;
    ChainlinkCancelled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkCancelledEventFilter;

    "ChainlinkFulfilled(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;
    ChainlinkFulfilled(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkFulfilledEventFilter;

    "ChainlinkRequested(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;
    ChainlinkRequested(
      id?: PromiseOrValue<BytesLike> | null
    ): ChainlinkRequestedEventFilter;

    "CreateReq(bytes32)"(
      _requestId?: PromiseOrValue<BytesLike> | null
    ): CreateReqEventFilter;
    CreateReq(
      _requestId?: PromiseOrValue<BytesLike> | null
    ): CreateReqEventFilter;

    "FulfillRes(bytes32,uint256)"(
      _requestId?: PromiseOrValue<BytesLike> | null,
      _stepsCount?: null
    ): FulfillResEventFilter;
    FulfillRes(
      _requestId?: PromiseOrValue<BytesLike> | null,
      _stepsCount?: null
    ): FulfillResEventFilter;

    "GoalCreated(uint256,uint256)"(
      goalId?: PromiseOrValue<BigNumberish> | null,
      goalUpkeepID?: PromiseOrValue<BigNumberish> | null
    ): GoalCreatedEventFilter;
    GoalCreated(
      goalId?: PromiseOrValue<BigNumberish> | null,
      goalUpkeepID?: PromiseOrValue<BigNumberish> | null
    ): GoalCreatedEventFilter;

    "GoalDayRecordAdded(uint256,uint256,uint256)"(
      goalId?: PromiseOrValue<BigNumberish> | null,
      goalDayRecordId?: PromiseOrValue<BigNumberish> | null,
      stepsCount?: null
    ): GoalDayRecordAddedEventFilter;
    GoalDayRecordAdded(
      goalId?: PromiseOrValue<BigNumberish> | null,
      goalDayRecordId?: PromiseOrValue<BigNumberish> | null,
      stepsCount?: null
    ): GoalDayRecordAddedEventFilter;

    "GoalFinished(uint256,uint8)"(
      goalId?: PromiseOrValue<BigNumberish> | null,
      status?: PromiseOrValue<BigNumberish> | null
    ): GoalFinishedEventFilter;
    GoalFinished(
      goalId?: PromiseOrValue<BigNumberish> | null,
      status?: PromiseOrValue<BigNumberish> | null
    ): GoalFinishedEventFilter;

    "OwnershipTransferRequested(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    _createRequest(
      goalId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _fulfill(
      _requestId: PromiseOrValue<BytesLike>,
      _stepsCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkUpkeep(
      checkData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createGoal(
      goalParams: GoalParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    env(overrides?: CallOverrides): Promise<BigNumber>;

    fulfill(
      _requestId: PromiseOrValue<BytesLike>,
      _stepsCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    goalCheckInterval(overrides?: CallOverrides): Promise<BigNumber>;

    goalsDayRecordsMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    goalsDaysRecordsReqsMap(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    goalsMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    i_link(overrides?: CallOverrides): Promise<BigNumber>;

    i_registry(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processGoalDayRecord(
      goalId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      stepsCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registrar(overrides?: CallOverrides): Promise<BigNumber>;

    requestGoalDayRecord(
      goalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stepsHunterNft(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawLink(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _createRequest(
      goalId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _fulfill(
      _requestId: PromiseOrValue<BytesLike>,
      _stepsCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkUpkeep(
      checkData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createGoal(
      goalParams: GoalParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    env(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fulfill(
      _requestId: PromiseOrValue<BytesLike>,
      _stepsCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    goalCheckInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    goalsDayRecordsMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    goalsDaysRecordsReqsMap(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    goalsMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    i_link(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    i_registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTimeStamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performUpkeep(
      performData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processGoalDayRecord(
      goalId: PromiseOrValue<BigNumberish>,
      requestId: PromiseOrValue<BytesLike>,
      stepsCount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestGoalDayRecord(
      goalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stepsHunterNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLink(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
